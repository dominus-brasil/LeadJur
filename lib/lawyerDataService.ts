import { db } from './firebase';
import { collection, addDoc, getDocs, query, where, orderBy, limit } from 'firebase/firestore';

// Servi√ßo para obter dados de advogados de fontes p√∫blicas
export const lawyerDataService = {
  
  // üîç M√âTODO 1: Web Scraping de dados p√∫blicos da OAB (exemplo conceitual)
  async fetchPublicOABData(estado: string) {
    console.log(`üîç Buscando dados p√∫blicos da OAB-${estado}...`);
    
    try {
      // IMPORTANTE: Este √© um exemplo conceitual
      // Cada estado tem seu pr√≥prio site da OAB com estrutura diferente
      // Voc√™ precisa verificar os termos de uso antes de implementar
      
      const oabUrls = {
        'SP': 'https://www.oabsp.org.br/servicos-consulta-de-advogados',
        'RJ': 'https://www.oabrj.org.br/pesquisaAdvogado',
        'MG': 'https://www.oabmg.org.br/consulta-advogados',
        'RS': 'https://www.oabrs.org.br/consulta-advogados',
        // Adicione mais estados conforme necess√°rio
      };

      const url = oabUrls[estado as keyof typeof oabUrls];
      
      if (!url) {
        throw new Error(`Estado ${estado} n√£o suportado ainda`);
      }

      // Simula√ß√£o de dados que seriam extra√≠dos
      const mockData = await this.generateMockOABData(estado);
      console.log(`‚úÖ Encontrados ${mockData.length} advogados em ${estado}`);
      
      return mockData;
      
    } catch (error) {
      console.error('Erro ao buscar dados da OAB:', error);
      throw error;
    }
  },

  // üìä Gerador de dados realistas (substituto tempor√°rio do scraping real)
  async generateMockOABData(estado: string) {
    const especialidades = [
      'Direito Civil', 'Direito Penal', 'Direito Trabalhista', 'Direito Tribut√°rio',
      'Direito Empresarial', 'Direito de Fam√≠lia', 'Direito Imobili√°rio', 'Direito Digital',
      'Direito Previdenci√°rio', 'Direito do Consumidor', 'Direito Administrativo',
      'Direito Ambiental', 'Direito Banc√°rio', 'Direito M√©dico'
    ];

    const cidades = {
      'SP': ['S√£o Paulo', 'Campinas', 'Santos', 'Ribeir√£o Preto', 'Sorocaba', 'S√£o Jos√© dos Campos'],
      'RJ': ['Rio de Janeiro', 'Niter√≥i', 'Petr√≥polis', 'Nova Friburgo', 'Cabo Frio', 'Campos dos Goytacazes'],
      'MG': ['Belo Horizonte', 'Uberl√¢ndia', 'Contagem', 'Juiz de Fora', 'Betim', 'Montes Claros'],
      'RS': ['Porto Alegre', 'Caxias do Sul', 'Pelotas', 'Canoas', 'Santa Maria', 'Gravata√≠']
    };

    const nomes = [
      'Ana Silva Santos', 'Carlos Eduardo Oliveira', 'Mariana Costa Lima', 'Jo√£o Pedro Almeida',
      'Fernanda Rodrigues', 'Ricardo Barbosa', 'Juliana Ferreira', 'Rafael Mendes',
      'Patr√≠cia Araujo', 'Gabriel Torres', 'Larissa Campos', 'Bruno Nascimento',
      'Camila Ribeiro', 'Lucas Martins', 'Beatriz Carvalho', 'Thiago Pereira'
    ];

    const advogados = [];
    const cidadesEstado = cidades[estado as keyof typeof cidades] || ['Capital'];
    
    for (let i = 0; i < 50; i++) {
      const nome = nomes[Math.floor(Math.random() * nomes.length)];
      const cidade = cidadesEstado[Math.floor(Math.random() * cidadesEstado.length)];
      const especialidade = especialidades[Math.floor(Math.random() * especialidades.length)];
      const oabNumber = Math.floor(Math.random() * 999999) + 100000;
      
      advogados.push({
        name: nome,
        oab: `OAB/${estado} ${oabNumber}`,
        specialty: especialidade,
        city: cidade,
        state: estado,
        email: `${nome.toLowerCase().replace(/\s+/g, '.')}.@advocacia.com`,
        phone: this.generatePhone(),
        company: this.generateCompanyName(nome),
        address: this.generateAddress(cidade),
        isPublic: true, // Marca como dado p√∫blico
        dataSource: 'OAB_PUBLIC',
        lastUpdated: new Date()
      });
    }

    return advogados;
  },

  // üè¢ Gerador de nome de escrit√≥rio
  generateCompanyName(nome: string) {
    const tipos = ['Advogados Associados', 'Consultoria Jur√≠dica', 'Advocacia', '& Associados'];
    const sobrenome = nome.split(' ').pop();
    const tipo = tipos[Math.floor(Math.random() * tipos.length)];
    return `${sobrenome} ${tipo}`;
  },

  // üì± Gerador de telefone
  generatePhone() {
    const ddd = Math.floor(Math.random() * 20) + 11;
    const numero = Math.floor(Math.random() * 90000000) + 90000000;
    return `(${ddd}) 9${numero}`;
  },

  // üìç Gerador de endere√ßo
  generateAddress(cidade: string) {
    const ruas = ['Rua das Flores', 'Av. Principal', 'Rua do Com√©rcio', 'Av. Central', 'Rua dos Advogados'];
    const rua = ruas[Math.floor(Math.random() * ruas.length)];
    const numero = Math.floor(Math.random() * 2000) + 100;
    return `${rua}, ${numero} - Centro, ${cidade}`;
  },

  // üíæ Importar dados para o Firebase
  async importLawyersToFirebase(lawyers: any[], userId: string) {
    try {
      console.log(`üì§ Importando ${lawyers.length} advogados para o Firebase...`);
      
      const lawyersCollection = collection(db, `users/${userId}/lawyers`);
      let imported = 0;
      let skipped = 0;

      for (const lawyer of lawyers) {
        try {
          // Verificar se j√° existe
          const existing = await getDocs(
            query(lawyersCollection, where('oab', '==', lawyer.oab))
          );

          if (existing.empty) {
            await addDoc(lawyersCollection, lawyer);
            imported++;
          } else {
            skipped++;
          }
        } catch (error) {
          console.error(`Erro ao importar advogado ${lawyer.name}:`, error);
        }
      }

      console.log(`‚úÖ Importa√ß√£o conclu√≠da: ${imported} novos, ${skipped} j√° existiam`);
      return { imported, skipped };
      
    } catch (error) {
      console.error('Erro na importa√ß√£o:', error);
      throw error;
    }
  },

  // üîç Busca avan√ßada de advogados
  async searchLawyers(userId: string, filters: {
    name?: string;
    city?: string;
    state?: string;
    specialty?: string;
    limit?: number;
  }) {
    try {
      const lawyersCollection = collection(db, `users/${userId}/lawyers`);
      let q = query(lawyersCollection);

      // Aplicar filtros
      if (filters.city) {
        q = query(q, where('city', '==', filters.city));
      }
      
      if (filters.state) {
        q = query(q, where('state', '==', filters.state));
      }
      
      if (filters.specialty) {
        q = query(q, where('specialty', '==', filters.specialty));
      }

      // Ordenar e limitar
      q = query(q, orderBy('name'), limit(filters.limit || 50));

      const snapshot = await getDocs(q);
      const lawyers = snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      })) as any[];

      // Filtro por nome (j√° que Firestore n√£o tem LIKE nativo)
      let results = lawyers;
      if (filters.name) {
        const searchTerm = filters.name.toLowerCase();
        results = lawyers.filter((lawyer: any) => 
          lawyer.name?.toLowerCase().includes(searchTerm)
        );
      }

      return results;
    } catch (error) {
      console.error('Erro na busca:', error);
      throw error;
    }
  },

  // üìä Estat√≠sticas da base de dados
  async getStats(userId: string) {
    try {
      const lawyersCollection = collection(db, `users/${userId}/lawyers`);
      const snapshot = await getDocs(lawyersCollection);
      
      const lawyers = snapshot.docs.map(doc => doc.data());
      
      // Agrupar por cidade
      const byCity = lawyers.reduce((acc, lawyer) => {
        acc[lawyer.city] = (acc[lawyer.city] || 0) + 1;
        return acc;
      }, {} as Record<string, number>);

      // Agrupar por especialidade
      const bySpecialty = lawyers.reduce((acc, lawyer) => {
        acc[lawyer.specialty] = (acc[lawyer.specialty] || 0) + 1;
        return acc;
      }, {} as Record<string, number>);

      return {
        total: lawyers.length,
        byCity: Object.entries(byCity).sort(([,a], [,b]) => b - a),
        bySpecialty: Object.entries(bySpecialty).sort(([,a], [,b]) => b - a)
      };
    } catch (error) {
      console.error('Erro ao obter estat√≠sticas:', error);
      throw error;
    }
  }
};